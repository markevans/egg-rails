// Generated by CoffeeScript 1.3.3
(function() {
  var $, Route, ancestorChain, delegate, eggIDCounter, instanceMethods, provide, rootKeyFor, splitOnSquareBrackets,
    __slice = [].slice,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  Object.extend = function() {
    var key, obj, otherObj, otherObjs, value, _i, _len;
    obj = arguments[0], otherObjs = 2 <= arguments.length ? __slice.call(arguments, 1) : [];
    for (_i = 0, _len = otherObjs.length; _i < _len; _i++) {
      otherObj = otherObjs[_i];
      for (key in otherObj) {
        value = otherObj[key];
        obj[key] = value;
      }
    }
    return obj;
  };

  Object.slice = function(obj, keys) {
    var key, newObj, _i, _len;
    newObj = {};
    for (_i = 0, _len = keys.length; _i < _len; _i++) {
      key = keys[_i];
      newObj[key] = obj[key];
    }
    return newObj;
  };

  Object.isEmpty = function(obj) {
    var key;
    for (key in obj) {
      if (obj.hasOwnProperty(key)) {
        return false;
      }
    }
    return true;
  };

  RegExp.escape = function(text) {
    return text.replace(/[-[\]{}()*+?.,\\^$|#\s]/g, "\\$&");
  };

  if (this.jQuery) {
    $ = jQuery;
    splitOnSquareBrackets = function(name) {
      return name.replace(/\]$/, '').split(/\]?\[/);
    };
    provide = function(object, keys) {
      var key, _ref;
      key = keys[0];
      if (key) {
        if ((_ref = object[key]) == null) {
          object[key] = {};
        }
        return provide(object[key], keys.slice(1));
      } else {
        return object;
      }
    };
    $.fn.formParams = function() {
      var basename, item, nameParts, params, _i, _len, _ref;
      params = {};
      _ref = this.serializeArray();
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        item = _ref[_i];
        nameParts = splitOnSquareBrackets(item.name);
        basename = nameParts.pop();
        provide(params, nameParts)[basename] = item.value;
      }
      return params;
    };
  }

  this.egg = {
    global: this
  };

  ancestorChain = function(obj) {
    if (obj.constructor.ancestors) {
      return [obj].concat(__slice.call(obj.constructor.ancestors()));
    } else {
      return [obj];
    }
  };

  egg.Subscription = (function() {

    function Subscription(eventChannel, callback, filter) {
      this.eventChannel = eventChannel;
      this.callback = callback;
      this.filter = filter;
      this.index = eventChannel.length;
      this.enable();
    }

    Subscription.prototype.enable = function() {
      return this.eventChannel[this.index] = this;
    };

    Subscription.prototype.cancel = function() {
      return delete this.eventChannel[this.index];
    };

    return Subscription;

  })();

  egg.Event = (function() {

    function Event(name, params, sender) {
      this.name = name;
      this.params = params;
      this.sender = sender;
      this.shouldBubble = true;
    }

    Event.prototype.preventBubbling = function() {
      return this.shouldBubble = false;
    };

    return Event;

  })();

  egg.Publisher = (function() {

    function Publisher() {
      this.on = __bind(this.on, this);

      this.emit = __bind(this.emit, this);

      this.silently = __bind(this.silently, this);
      this.globalChannel = {};
      this.channels = {};
      this.silent = false;
    }

    Publisher.prototype.silently = function(callback, context) {
      this.silent = true;
      callback.call(context);
      return this.silent = false;
    };

    Publisher.prototype.emit = function(name, params, sender) {
      var event, obj, _i, _len, _ref;
      if (this.silent) {
        return false;
      } else {
        event = new egg.Event(name, params, sender);
        if (sender) {
          _ref = ancestorChain(sender);
          for (_i = 0, _len = _ref.length; _i < _len; _i++) {
            obj = _ref[_i];
            if (!event.shouldBubble) {
              break;
            }
            this.runChannelCallbacks(this.channels[obj.eggID()], event);
          }
        }
        if (event.shouldBubble) {
          this.runChannelCallbacks(this.globalChannel, event);
        }
        return true;
      }
    };

    Publisher.prototype.on = function(names, callback, filter, sender) {
      var channel, name, _base, _i, _len, _name, _ref, _ref1, _ref2, _results;
      _ref = names.split(' ');
      _results = [];
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        name = _ref[_i];
        channel = sender ? (_ref1 = (_base = this.channels)[_name = sender.eggID()]) != null ? _ref1 : _base[_name] = {} : this.globalChannel;
        if ((_ref2 = channel[name]) == null) {
          channel[name] = [];
        }
        _results.push(new egg.Subscription(channel[name], callback, filter));
      }
      return _results;
    };

    Publisher.prototype.runChannelCallbacks = function(channel, event) {
      if (channel) {
        this.runCallbacks(channel[event.name], event);
        return this.runCallbacks(channel['*'], event);
      }
    };

    Publisher.prototype.runCallbacks = function(subscriptions, event) {
      var sub, _i, _len, _results;
      if (subscriptions) {
        _results = [];
        for (_i = 0, _len = subscriptions.length; _i < _len; _i++) {
          sub = subscriptions[_i];
          if (sub && (!sub.filter || sub.filter(event))) {
            _results.push(sub.callback(event.params, event, sub));
          } else {
            _results.push(void 0);
          }
        }
        return _results;
      }
    };

    return Publisher;

  })();

  egg.publisher = new egg.Publisher;

  egg.emit = egg.publisher.emit;

  egg.on = egg.publisher.on;

  egg.silently = egg.publisher.silently;

  instanceMethods = {
    emit: function(name, params) {
      return egg.publisher.emit(name, params, this);
    },
    on: function() {
      var args, callback, filter, name, _ref, _results;
      args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
      if (!this.hasSubscribers) {
        if (typeof this._onFirstSubscribeCallback === "function") {
          this._onFirstSubscribeCallback();
        }
        this.hasSubscribers = true;
      }
      if (args.length === 1) {
        _ref = args[0];
        _results = [];
        for (name in _ref) {
          callback = _ref[name];
          _results.push(egg.publisher.on(name, callback, null, this));
        }
        return _results;
      } else {
        name = args[0], callback = args[1], filter = args[2];
        return egg.publisher.on(name, callback, filter, this);
      }
    },
    onFirstSubscribe: function(callback) {
      return this._onFirstSubscribeCallback = callback;
    },
    silently: function(callback) {
      return egg.silently(callback, this);
    }
  };

  egg.Events = function(klass) {
    klass.include(instanceMethods);
    return klass.extend(instanceMethods);
  };

  eggIDCounter = 0;

  delegate = function(object, ownMethod, methods) {
    var method, _i, _len, _results;
    _results = [];
    for (_i = 0, _len = methods.length; _i < _len; _i++) {
      method = methods[_i];
      _results.push((function() {
        var meth;
        meth = method;
        return object[meth] = function() {
          var args, _ref;
          args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
          return (_ref = this[ownMethod]())[meth].apply(_ref, args);
        };
      })());
    }
    return _results;
  };

  egg.Base = (function() {
    /* Class methods
    */

    Base.include = function(obj) {
      return Object.extend(this.prototype, obj);
    };

    Base.extend = function(obj) {
      return Object.extend(this, obj);
    };

    Base.use = function() {
      var args, plugin, _base, _ref;
      plugin = arguments[0], args = 2 <= arguments.length ? __slice.call(arguments, 1) : [];
      ((_ref = (_base = this.classInstanceVars()).plugins) != null ? _ref : _base.plugins = []).push(plugin);
      return plugin.apply(null, [this].concat(__slice.call(args)));
    };

    Base.uses = function(plugin) {
      var plugins, res;
      plugins = this.classInstanceVars().plugins;
      res = !!plugins && plugins.indexOf(plugin) !== -1;
      return res;
    };

    Base.sub = function(name, definition) {
      if (!name.match(/^[A-Z]\w+$/)) {
        throw "invalid class name '" + name + "'";
      }
      eval("var childClass = function " + name + "(){ " + name + ".__super__.constructor.apply(this, arguments) }");
      __extends(childClass, this);
      if (definition) {
        definition.call(childClass, childClass);
      }
      return childClass;
    };

    Base.parentClass = function() {
      var _ref;
      return (_ref = this.__super__) != null ? _ref.constructor : void 0;
    };

    Base.allClassInstanceVars = {};

    Base.classInstanceVars = function() {
      var _base, _name, _ref;
      return (_ref = (_base = this.allClassInstanceVars)[_name = this.name]) != null ? _ref : _base[_name] = {};
    };

    Base.ancestors = function() {
      var parent, _base, _ref;
      return (_ref = (_base = this.classInstanceVars()).ancestors) != null ? _ref : _base.ancestors = (parent = this.parentClass(), parent ? [this].concat(parent.ancestors()) : [this]);
    };

    Base.delegateInstanceMethodsTo = function(ownMethod, methods) {
      return delegate(this.prototype, ownMethod, methods);
    };

    Base.delegateTo = function(ownMethod, methods) {
      return delegate(this, ownMethod, methods);
    };

    Base.create = function(opts) {
      if (opts == null) {
        opts = {};
      }
      return new this(opts);
    };

    Base.init = function(callback) {
      return this.on('init', function(params) {
        return callback.call(params.instance, params.opts);
      });
    };

    Base.destroy = function(callback) {
      return this.on('destroy', function(params) {
        return callback.call(params.instance, params.opts);
      });
    };

    Base.eggID = function() {
      return this.name;
    };

    /* Instance methods
    */


    function Base(opts) {
      if (opts == null) {
        opts = {};
      }
      this.emit('init', {
        opts: opts,
        instance: this
      });
    }

    Base.prototype.destroy = function(opts) {
      if (opts == null) {
        opts = {};
      }
      return this.emit('destroy', {
        opts: opts,
        instance: this
      });
    };

    Base.prototype.className = function() {
      return this.constructor.name;
    };

    Base.prototype.eggID = function() {
      var _ref;
      return (_ref = this._eggID) != null ? _ref : this._eggID = "" + this.constructor.name + "-" + (eggIDCounter++);
    };

    Base.prototype.subscriptions = function() {
      var _ref;
      return (_ref = this._subscriptions) != null ? _ref : this._subscriptions = [];
    };

    Base.prototype.subscribe = function() {
      var args, object;
      object = arguments[0], args = 2 <= arguments.length ? __slice.call(arguments, 1) : [];
      return this.subscriptions().push(object.on.apply(object, args));
    };

    /* Use some modules
    */


    Base.use(egg.Events);

    Base.destroy(function() {
      var sub, _i, _len, _ref, _results;
      _ref = this.subscriptions();
      _results = [];
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        sub = _ref[_i];
        _results.push(sub.cancel());
      }
      return _results;
    });

    return Base;

  })();

  egg.Set = (function(_super) {

    __extends(Set, _super);

    function Set(opts) {
      var item, _i, _len, _ref;
      if (opts == null) {
        opts = {};
      }
      this.items = {};
      if (opts.items) {
        _ref = opts.items;
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          item = _ref[_i];
          this.items[item.eggID()] = item;
        }
      }
      this.sorter = opts.sorter;
    }

    Set.prototype.add = function(item) {
      var id;
      id = item.eggID();
      if (!this.items[id]) {
        this.items[id] = item;
        delete this.array;
        if (this.hasSubscribers) {
          this.emit('add', {
            instance: item
          });
        }
        return true;
      }
    };

    Set.prototype.remove = function(item) {
      var id;
      id = item.eggID();
      if (this.items[id]) {
        delete this.items[id];
        delete this.array;
        if (this.hasSubscribers) {
          this.emit('remove', {
            instance: item
          });
        }
        return true;
      }
    };

    Set.prototype.notifyChanged = function(instance, from, to) {
      if (this.hasSubscribers) {
        return this.emit('change', {
          instance: instance,
          from: from,
          to: to
        });
      }
    };

    Set.prototype.count = function(filter) {
      var count;
      if (!filter) {
        return this.toArray().length;
      }
      count = 0;
      this.forEach(function(item) {
        if (filter(item)) {
          return count++;
        }
      });
      return count;
    };

    Set.prototype.sum = function(callback) {
      var sum;
      sum = 0;
      this.forEach(function(item) {
        return sum += parseFloat(callback(item));
      });
      return sum;
    };

    Set.prototype.has = function(item) {
      return item.eggID && (item.eggID() in this.items);
    };

    Set.prototype.filter = function(callback) {
      var set,
        _this = this;
      set = new this.constructor;
      this.forEach(function(item) {
        if (callback(item)) {
          return set.add(item);
        }
      });
      return set;
    };

    Set.prototype.asc = function(attr) {
      return new this.constructor({
        items: this.toArray(),
        sorter: function(a, b) {
          if (a.get(attr) > b.get(attr)) {
            return 1;
          } else {
            return -1;
          }
        }
      });
    };

    Set.prototype.desc = function(attr) {
      return new this.constructor({
        items: this.toArray(),
        sorter: function(a, b) {
          if (a.get(attr) < b.get(attr)) {
            return 1;
          } else {
            return -1;
          }
        }
      });
    };

    Set.prototype.sort = function(sorter) {
      return new this.constructor({
        items: this.toArray(),
        sorter: sorter
      });
    };

    Set.prototype.toArray = function() {
      var array, k, v, _ref;
      if (this.array) {
        return this.array;
      }
      array = [];
      _ref = this.items;
      for (k in _ref) {
        v = _ref[k];
        array.push(v);
      }
      return this.array = this.sorter ? array.sort(this.sorter) : array;
    };

    Set.prototype.forEach = function(callback) {
      var array, i, item, _i, _len, _ref, _results;
      array = this.toArray();
      _ref = this.toArray();
      _results = [];
      for (i = _i = 0, _len = _ref.length; _i < _len; i = ++_i) {
        item = _ref[i];
        _results.push(callback(item, i, array));
      }
      return _results;
    };

    Set.prototype.first = function() {
      return this.toArray()[0];
    };

    Set.prototype.map = function(callbackOrAttr) {
      var array, attr, callback;
      if (typeof callbackOrAttr === "string") {
        attr = callbackOrAttr;
        callback = function(item) {
          if (typeof item[attr] === 'function') {
            return item[attr]();
          } else {
            return item[attr];
          }
        };
      } else {
        callback = callbackOrAttr;
      }
      array = [];
      this.forEach(function(item) {
        return array.push(callback(item));
      });
      return array;
    };

    Set.prototype.pluck = function(attr) {
      return this.map(function(item) {
        return item.get(attr);
      });
    };

    Set.prototype.sample = function(attr) {
      var array, index, model;
      array = this.toArray();
      index = Math.floor(Math.random() * array.length);
      model = array[index];
      if (attr) {
        return model.get(attr);
      } else {
        return model;
      }
    };

    return Set;

  })(egg.Base);

  egg.RestApi = (function(_super) {

    __extends(RestApi, _super);

    function RestApi() {
      return RestApi.__super__.constructor.apply(this, arguments);
    }

    RestApi.prototype.commonAjaxOpts = {
      dataType: 'json'
    };

    RestApi.init(function(opts) {
      return this.commonAjaxOpts = Object.extend({
        headers: opts.headers
      }, this.commonAjaxOpts);
    });

    RestApi.prototype.load = function(klass, opts) {
      var deferred, url;
      if (opts == null) {
        opts = {};
      }
      deferred = $.Deferred();
      url = opts.url || klass.url();
      this.get(url, opts.params, function(data) {
        var attrs, models, _i, _len;
        models = [];
        for (_i = 0, _len = data.length; _i < _len; _i++) {
          attrs = data[_i];
          models.push(klass.load({
            attrs: attrs
          }));
        }
        return deferred.resolve(models);
      }, 'load');
      return deferred.promise();
    };

    RestApi.prototype.save = function(model, opts) {
      if (opts == null) {
        opts = {};
      }
      if (model.isPersisted()) {
        return this.update(model, opts);
      } else {
        return this.create(model, opts);
      }
    };

    RestApi.prototype.sync = function(model, opts) {
      var params, url;
      if (opts == null) {
        opts = {};
      }
      url = opts.url || (typeof model.syncUrl === "function" ? model.syncUrl() : void 0) || (typeof model.url === "function" ? model.url() : void 0) || (function() {
        throw "" + (model.className()) + " needs a syncUrl or url method";
      })();
      params = opts.params || (typeof model.syncParams === "function" ? model.syncParams() : void 0) || (typeof model.params === "function" ? model.params() : void 0);
      return this.get(url, params, function(data) {
        return model.set(data);
      }, 'sync');
    };

    RestApi.prototype.create = function(model, opts) {
      var params, url;
      if (opts == null) {
        opts = {};
      }
      url = opts.url || (typeof model.createUrl === "function" ? model.createUrl() : void 0) || (typeof model.url === "function" ? model.url() : void 0) || (function() {
        throw "" + (model.className()) + " needs a createUrl or url method";
      })();
      params = opts.params || (typeof model.createParams === "function" ? model.createParams() : void 0) || (typeof model.params === "function" ? model.params() : void 0);
      return this.post(url, params, function(data) {
        return model.set(data);
      }, 'create');
    };

    RestApi.prototype.update = function(model, opts) {
      var params, url;
      if (opts == null) {
        opts = {};
      }
      url = opts.url || (typeof model.updateUrl === "function" ? model.updateUrl() : void 0) || (typeof model.url === "function" ? model.url() : void 0) || (function() {
        throw "" + (model.className()) + " needs an updateUrl or url method";
      })();
      params = opts.params || (typeof model.updateParams === "function" ? model.updateParams() : void 0) || (typeof model.params === "function" ? model.params() : void 0);
      return this.put(url, params, function(data) {
        return model.set(data);
      }, 'update');
    };

    RestApi.prototype.destroy = function(model, opts) {
      var params, url;
      if (opts == null) {
        opts = {};
      }
      url = opts.url || (typeof model.destroyUrl === "function" ? model.destroyUrl() : void 0) || (typeof model.url === "function" ? model.url() : void 0) || (function() {
        throw "" + (model.className()) + " needs a destroyUrl or url method";
      })();
      params = opts.params || (typeof model.destroyParams === "function" ? model.destroyParams() : void 0) || (typeof model.params === "function" ? model.params() : void 0);
      return this["delete"](url, params, null, 'destroy');
    };

    RestApi.prototype.get = function(url, params, callback, eventPrefix) {
      if (eventPrefix == null) {
        eventPrefix = 'get';
      }
      return this._ajax(url, {
        type: 'GET',
        data: params
      }, callback, eventPrefix);
    };

    RestApi.prototype.post = function(url, params, callback, eventPrefix) {
      if (eventPrefix == null) {
        eventPrefix = 'post';
      }
      return this._ajax(url, {
        type: 'POST',
        data: params
      }, callback, eventPrefix);
    };

    RestApi.prototype.put = function(url, params, callback, eventPrefix) {
      if (eventPrefix == null) {
        eventPrefix = 'put';
      }
      return this._ajax(url, {
        type: 'PUT',
        data: params
      }, callback, eventPrefix);
    };

    RestApi.prototype["delete"] = function(url, params, callback, eventPrefix) {
      if (eventPrefix == null) {
        eventPrefix = 'delete';
      }
      return this._ajax(url, {
        type: 'DELETE',
        data: params
      }, callback, eventPrefix);
    };

    RestApi.prototype._ajax = function(url, opts, successCallback, eventPrefix) {
      var deferred,
        _this = this;
      if (opts == null) {
        opts = {};
      }
      if (eventPrefix == null) {
        eventPrefix = 'request';
      }
      deferred = $.Deferred();
      $.ajax(url, Object.extend({}, opts, this.commonAjaxOpts)).done(function(data) {
        if (successCallback) {
          successCallback(data);
        }
        deferred.resolve({
          data: data
        });
        _this.emit("" + eventPrefix + ":success", {
          data: data
        });
        return _this.emit("request:success", {
          type: eventPrefix,
          data: data
        });
      }).fail(function(jqXhr, status, errors) {
        deferred.reject({
          status: status,
          errors: errors
        });
        _this.emit("" + eventPrefix + ":error", {
          status: status,
          errors: errors
        });
        return _this.emit("request:error", {
          type: eventPrefix,
          status: status,
          errors: errors
        });
      });
      return deferred.promise();
    };

    return RestApi;

  })(egg.Base);

  egg.Datastore = (function(_super) {

    __extends(Datastore, _super);

    function Datastore() {
      return Datastore.__super__.constructor.apply(this, arguments);
    }

    Datastore.init(function(opts) {
      return this.store = opts.store || (function() {
        throw "Need 'store' option in " + this["class"].name;
      }).call(this);
    });

    Datastore.prototype.load = function(klass) {
      var attrs, data, deferred, models, _i, _len;
      deferred = $.Deferred();
      models = [];
      data = this.get(klass);
      if (data) {
        for (_i = 0, _len = data.length; _i < _len; _i++) {
          attrs = data[_i];
          models.push(klass.load({
            attrs: attrs
          }));
        }
      }
      deferred.resolve(models);
      return deferred.promise();
    };

    Datastore.prototype.get = function(klass) {
      return JSON.parse(this.store.getItem(klass.name));
    };

    Datastore.prototype.save = function(klass) {
      return this.store.setItem(klass.name, JSON.stringify(klass.all().map('attrs')));
    };

    Datastore.prototype.destroy = function(klass) {
      return this.store.removeItem(klass.name);
    };

    return Datastore;

  })(egg.Base);

  egg.Model = (function(_super) {

    __extends(Model, _super);

    function Model(opts) {
      this._attrs = opts.attrs || {};
      this.constructor.instances().add(this);
      Model.__super__.constructor.apply(this, arguments);
      if (opts.loaded) {
        this.emit('load', {
          instance: this
        });
      } else {
        this.emit('new', {
          instance: this
        });
      }
    }

    Model.prototype.destroy = function(opts) {
      this.constructor.instances().remove(this);
      return Model.__super__.destroy.apply(this, arguments);
    };

    Model.instances = function() {
      var vars;
      vars = this.classInstanceVars();
      if (!vars.instances) {
        vars.instances = new egg.Set;
        this.on('change', function(params) {
          return vars.instances.notifyChanged(params.instance, params.from, params.to);
        });
      }
      return vars.instances;
    };

    Model.loadFrom = function(storage, opts) {
      var _this = this;
      if (opts == null) {
        opts = {};
      }
      return storage.load(this, opts).done(function(instances) {
        return _this.emit('load:many', {
          from: storage,
          instances: instances,
          opts: opts
        });
      });
    };

    Model.load = function(opts) {
      if (opts == null) {
        opts = {};
      }
      opts.loaded = true;
      return this.create(opts);
    };

    Model.where = function(attrs) {
      var index;
      index = egg.Index["for"](this.instances(), Object.keys(attrs));
      if (index) {
        return index.setFor(attrs);
      } else {
        return this.filter(function(model) {
          var key, value;
          for (key in attrs) {
            value = attrs[key];
            if (model.get(key) !== value) {
              return false;
            }
          }
          return true;
        });
      }
    };

    Model.find = function(attrs) {
      return this.where(attrs).first();
    };

    Model.findOrCreate = function(attrs) {
      return this.find(attrs) || this.create({
        attrs: attrs
      });
    };

    Model.all = function() {
      return this.instances();
    };

    Model.destroyAll = function() {
      return this.instances().forEach(function(model) {
        return model.destroy();
      });
    };

    Model.index = function() {
      var attrNames;
      attrNames = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
      if (!egg.Index["for"](this.instances(), attrNames)) {
        return egg.Index.create({
          parent: this.instances(),
          attrNames: attrNames
        });
      }
    };

    Model.delegateTo('instances', ['has', 'toArray', 'forEach', 'first', 'map', 'pluck', 'asc', 'desc', 'filter', 'sample', 'count']);

    Model.prototype.get = function(attr) {
      return this._attrs[attr];
    };

    Model.prototype.attrs = function() {
      var keys;
      keys = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
      if (keys.length) {
        return Object.slice(this._attrs, keys);
      } else {
        return Object.extend({}, this._attrs);
      }
    };

    Model.prototype.set = function() {
      var args, attr, from, to, value, _ref;
      args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
      from = this.attrs();
      if (args.length === 1) {
        _ref = args[0];
        for (attr in _ref) {
          value = _ref[attr];
          this.setOne(attr, value);
        }
      } else {
        attr = args[0], value = args[1];
        this.setOne(attr, value);
      }
      to = this.attrs();
      this.emit('change', {
        instance: this,
        from: from,
        to: to
      });
      return this;
    };

    Model.prototype.setOne = function(attr, value) {
      var from;
      from = this.get(attr);
      this._attrs[attr] = value;
      return this.emit("change:" + attr, {
        instance: this,
        from: from,
        to: value
      });
    };

    Model.prototype.commit = function() {
      return this.emit('commit', {
        instance: this
      });
    };

    Model.prototype.toJSON = function() {
      return Object.extend({}, this._attrs);
    };

    return Model;

  })(egg.Base);

  egg.activeRecord = function(klass, opts) {
    var baseUrl, paramsNamespace;
    if (opts == null) {
      opts = {};
    }
    baseUrl = opts.url || (function() {
      throw "activeRecord plugin needs a url opt";
    })();
    paramsNamespace = opts.paramsNamespace;
    return klass.include({
      isPersisted: function() {
        return !!this.get('id');
      },
      createUrl: function() {
        return baseUrl;
      },
      url: function() {
        return "" + baseUrl + "/" + (this.get('id'));
      },
      params: function() {
        var params;
        if (paramsNamespace) {
          params = {};
          params[paramsNamespace] = this.attrs();
          return params;
        } else {
          return this.attrs();
        }
      }
    });
  };

  rootKeyFor = function(attrNames) {
    return attrNames.sort().join('-');
  };

  egg.Index = (function(_super) {

    __extends(Index, _super);

    function Index() {
      return Index.__super__.constructor.apply(this, arguments);
    }

    Index.indexes = {};

    Index["for"] = function(parent, attrNames) {
      var _ref;
      return (_ref = this.indexes[parent.eggID()]) != null ? _ref[rootKeyFor(attrNames)] : void 0;
    };

    Index.init(function(opts) {
      var _base, _name, _ref,
        _this = this;
      this.parent = opts.parent;
      this.attrNames = opts.attrNames.sort();
      this.sets = {};
      if ((_ref = (_base = this.constructor.indexes)[_name = this.parent.eggID()]) == null) {
        _base[_name] = {};
      }
      this.constructor.indexes[this.parent.eggID()][rootKeyFor(this.attrNames)] = this;
      this.parent.on('add', function(params) {
        return _this.setFor(params.instance.attrs()).add(params.instance);
      });
      this.parent.on('change', function(params) {
        var newSet, oldSet;
        oldSet = _this.setFor(params.from);
        newSet = _this.setFor(params.to);
        if (oldSet === newSet) {
          return oldSet.notifyChanged(params.instance, params.from, params.to);
        } else {
          oldSet.remove(params.instance);
          return newSet.add(params.instance);
        }
      });
      return this.parent.on('remove', function(params) {
        return _this.setFor(params.instance.attrs()).remove(params.instance);
      });
    });

    Index.prototype.keyFor = function(attrs) {
      var key, values, _i, _len, _ref;
      values = [];
      _ref = this.attrNames;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        key = _ref[_i];
        values.push(attrs[key]);
      }
      return values.join('-');
    };

    Index.prototype.setFor = function(attrs) {
      var _base, _name, _ref;
      return (_ref = (_base = this.sets)[_name = this.keyFor(attrs)]) != null ? _ref : _base[_name] = new egg.Set;
    };

    return Index;

  })(egg.Base);

  egg.View = (function(_super) {

    __extends(View, _super);

    View.onDOM = function(selector, domEvent, handlerMethod, paramsFunc) {
      return this.delegatedEvents()["" + domEvent + "-" + selector] = {
        domEvent: domEvent,
        selector: selector,
        handlerMethod: handlerMethod,
        paramsFunc: paramsFunc
      };
    };

    View.delegatedEvents = function() {
      var _ref;
      return (_ref = this._delegatedEvents) != null ? _ref : this._delegatedEvents = {};
    };

    View.listen = function(eventName, callback) {
      return this.presenterSubscriptions()[eventName] = {
        eventName: eventName,
        callback: callback
      };
    };

    View.presenterSubscriptions = function() {
      var _ref;
      return (_ref = this._presenterSubscriptions) != null ? _ref : this._presenterSubscriptions = {};
    };

    function View(opts) {
      this.elem = (function() {
        if (opts.elem) {
          return $(opts.elem)[0];
        } else {
          throw "Missing elem!";
        }
      })();
      this.presentedObjects = opts.present;
      this._presenter = opts.presenter;
      this._handler = opts.handler;
      this.delegateEvents();
      this.subscribeToPresenter();
      this.setClassName();
      View.__super__.constructor.apply(this, arguments);
    }

    View.prototype.destroy = function(opts) {
      this.unsetClassName();
      this.undelegateEvents();
      return View.__super__.destroy.apply(this, arguments);
    };

    View.prototype.$ = function(selector) {
      return $(this.elem).find(selector);
    };

    View.prototype.destroyWithElem = function() {
      this.destroy();
      return $(this.elem).remove();
    };

    View.prototype.delegateEvents = function() {
      var d, key, _ref, _results,
        _this = this;
      this.delegatedEventsEnabled = true;
      _ref = this.constructor.delegatedEvents();
      _results = [];
      for (key in _ref) {
        d = _ref[key];
        _results.push($(this.elem).on(d.domEvent, d.selector, d, function(e) {
          var params, _name, _name1, _ref1;
          if (_this.delegatedEventsEnabled) {
            e.stopPropagation();
            e.preventDefault();
            if (e.data.paramsFunc) {
              params = e.data.paramsFunc.call(_this, e);
            }
            if (typeof _this[_name = e.data.handlerMethod] === "function") {
              _this[_name](e);
            }
            return (_ref1 = _this.handler()) != null ? typeof _ref1[_name1 = e.data.handlerMethod] === "function" ? _ref1[_name1](params) : void 0 : void 0;
          }
        }));
      }
      return _results;
    };

    View.prototype.undelegateEvents = function() {
      return this.delegatedEventsEnabled = false;
    };

    View.prototype.setClassName = function() {
      if (this.constructor.className) {
        return $(this.elem).addClass(this.constructor.className);
      }
    };

    View.prototype.unsetClassName = function() {
      if (this.constructor.className) {
        return $(this.elem).removeClass(this.constructor.className);
      }
    };

    View.prototype.presenter = function() {
      var _ref;
      return (_ref = this._presenter) != null ? _ref : this._presenter = this.presenterClass().create({
        objects: this.presentedObjects
      });
    };

    View.prototype.presenterClass = function() {
      return egg.global[this.className().replace(/View$/, 'Presenter')] || egg.Presenter;
    };

    View.prototype.subscribeToPresenter = function() {
      var f, key, s, _ref, _results;
      _ref = this.constructor.presenterSubscriptions();
      _results = [];
      for (key in _ref) {
        s = _ref[key];
        f = function() {
          var callback, cb,
            _this = this;
          cb = s.callback;
          callback = typeof cb === 'string' ? function() {
            var args;
            args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
            return _this[cb].apply(_this, args);
          } : function() {
            var args;
            args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
            return cb.apply(_this, args);
          };
          return this.subscribe(this.presenter(), s.eventName, callback);
        };
        _results.push(f.call(this));
      }
      return _results;
    };

    View.prototype.handler = function() {
      var _ref, _ref1;
      return (_ref = this._handler) != null ? _ref : this._handler = (_ref1 = this.handlerClass()) != null ? _ref1.create({
        objects: this.presentedObjects
      }) : void 0;
    };

    View.prototype.handlerClass = function() {
      return egg.global[this.className().replace(/View$/, 'Handler')];
    };

    return View;

  })(egg.Base);

  egg.jsModelView = function(klass) {
    return klass.include({
      subscribeToObj: function() {
        var callback, eventName, key, s, _ref, _results,
          _this = this;
        _ref = this.constructor.objectSubscriptionSpecs();
        _results = [];
        for (key in _ref) {
          s = _ref[key];
          eventName = s.eventName;
          callback = function() {
            var args;
            args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
            return _this[s.method].apply(_this, args);
          };
          this.obj.bind(eventName, callback);
          _results.push(this.objectSubscriptions().push({
            eventName: eventName,
            callback: callback
          }));
        }
        return _results;
      },
      unsubscribeToObj: function() {
        var sub, _i, _len, _ref, _results;
        _ref = this.objectSubscriptions();
        _results = [];
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          sub = _ref[_i];
          _results.push(this.obj.unbind(sub.eventName, sub.callback));
        }
        return _results;
      }
    });
  };

  egg.Presenter = (function(_super) {
    var extraJSON, isEnumerable, isFunction, isObject;

    __extends(Presenter, _super);

    function Presenter() {
      return Presenter.__super__.constructor.apply(this, arguments);
    }

    isEnumerable = function(obj) {
      return !!obj.forEach;
    };

    isFunction = function(value) {
      return typeof value === 'function';
    };

    isObject = function(value) {
      return typeof value === 'object';
    };

    Presenter.init(function(opts) {
      this.objects = opts.objects || {};
      return this.onFirstSubscribe(function() {
        var item, name, _ref, _results,
          _this = this;
        _ref = this.objects;
        _results = [];
        for (name in _ref) {
          item = _ref[name];
          _results.push(this.subscribe(item, '*', function(params, event) {
            return _this.emit("" + name + ":" + event.name, params);
          }));
        }
        return _results;
      });
    });

    Presenter.includeInJSON = function() {
      var methodLists;
      methodLists = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
      return this.classInstanceVars().extraJSONProperties = Object.extend.apply(Object, [{}, this.classInstanceVars().extraJSONProperties].concat(__slice.call(methodLists)));
    };

    Presenter.prototype.extraJSONProperties = function() {
      return this.constructor.classInstanceVars().extraJSONProperties || {};
    };

    Presenter.decorate = function() {
      var className, decorator, methodList, methodLists, _i, _len;
      className = arguments[0], methodLists = 2 <= arguments.length ? __slice.call(arguments, 1) : [];
      decorator = {};
      for (_i = 0, _len = methodLists.length; _i < _len; _i++) {
        methodList = methodLists[_i];
        if (isEnumerable(methodList)) {
          methodList.forEach(function(method) {
            return decorator[method] = function() {
              if (isFunction(this[method])) {
                return this[method]();
              } else {
                return this[method];
              }
            };
          });
        } else {
          Object.extend(decorator, methodList);
        }
      }
      return this.decorators()[className] = decorator;
    };

    Presenter.decorators = function() {
      var _base, _ref;
      return (_ref = (_base = this.classInstanceVars()).decorators) != null ? _ref : _base.decorators = {};
    };

    Presenter.prototype.decoratorFor = function(obj) {
      return this.constructor.decorators()[obj.constructor.name];
    };

    extraJSON = function(presenter) {
      var attr, json, name, _ref;
      json = {};
      _ref = presenter.extraJSONProperties();
      for (name in _ref) {
        attr = _ref[name];
        json[name] = (isFunction(attr) ? attr.call(presenter) : attr);
      }
      return json;
    };

    Presenter.prototype.toJSON = function() {
      var json, name, object, _ref;
      json = extraJSON(this);
      _ref = this.objects;
      for (name in _ref) {
        object = _ref[name];
        json[name] = this.present(object);
      }
      return json;
    };

    Presenter.prototype.present = function(obj) {
      if (isEnumerable(obj)) {
        return this.presentEnumerable(obj);
      } else if (isObject(obj)) {
        return this.presentObject(obj);
      } else {
        return obj;
      }
    };

    Presenter.prototype.presentObject = function(obj) {
      var decorator, hash, key, value;
      hash = (typeof obj.toJSON === "function" ? obj.toJSON() : void 0) || Object.extend({}, obj);
      decorator = this.decoratorFor(obj);
      if (decorator) {
        for (key in decorator) {
          value = decorator[key];
          hash[key] = this.present(isFunction(value) ? value.call(obj) : value);
        }
      }
      return hash;
    };

    Presenter.prototype.presentEnumerable = function(obj) {
      var json,
        _this = this;
      json = [];
      obj.forEach(function(item) {
        return json.push(_this.present(item));
      });
      return json;
    };

    return Presenter;

  })(egg.Base);

  egg.Handler = (function(_super) {

    __extends(Handler, _super);

    function Handler(opts) {
      var name, object, _ref;
      Handler.__super__.constructor.apply(this, arguments);
      if (opts.objects) {
        _ref = opts.objects;
        for (name in _ref) {
          object = _ref[name];
          this[name] = object;
        }
      }
    }

    return Handler;

  })(egg.Base);

  Route = (function() {
    var compile, extractParams, parseQuery, queryString, tokenPattern;

    tokenPattern = /:([\w_]+)/;

    queryString = function(params) {
      var key, parts, value;
      parts = [];
      for (key in params) {
        value = params[key];
        parts.push("" + (encodeURIComponent(key)) + "=" + (encodeURIComponent(value)));
      }
      return parts.join('&');
    };

    parseQuery = function(query) {
      var key, params, part, value, _i, _len, _ref, _ref1;
      params = {};
      _ref = query.split('&');
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        part = _ref[_i];
        _ref1 = part.split('='), key = _ref1[0], value = _ref1[1];
        params[key] = value;
      }
      return params;
    };

    compile = function(pattern) {
      var matches, paramNames;
      pattern = RegExp.escape(pattern);
      paramNames = [];
      while (matches = pattern.match(tokenPattern)) {
        paramNames.push(matches[1]);
        pattern = pattern.replace(tokenPattern, '([\\w_]+)');
      }
      return [new RegExp("^" + pattern + "$"), paramNames];
    };

    extractParams = function(string, matcher, paramNames) {
      var group, i, matches, params, _i, _len, _ref;
      params = {};
      matches = matcher.exec(string);
      _ref = matches.slice(1, matches.length + 1 || 9e9);
      for (i = _i = 0, _len = _ref.length; _i < _len; i = ++_i) {
        group = _ref[i];
        params[paramNames[i]] = group;
      }
      return params;
    };

    function Route(name, pattern) {
      var _ref;
      this.name = name;
      if (pattern[0] === '#') {
        this.usesHash = true;
        this.pattern = pattern.slice(1);
      } else {
        this.usesHash = false;
        this.pattern = pattern;
      }
      _ref = compile(this.pattern), this.matcher = _ref[0], this.paramNames = _ref[1];
    }

    Route.prototype.toURL = function(params) {
      var key, pattern, query, token, url, value;
      pattern = this.pattern;
      query = {};
      for (key in params) {
        value = params[key];
        token = ':' + key;
        if (pattern.match(token)) {
          pattern = pattern.replace(token, value);
        } else {
          query[key] = value;
        }
      }
      url = "";
      if (this.usesHash) {
        url += "#";
      }
      url += pattern;
      if (!Object.isEmpty(query)) {
        url += "?" + (queryString(query));
      }
      return url;
    };

    Route.prototype.matches = function(url) {
      var path, query, _ref;
      _ref = this.urlParts(url), path = _ref[0], query = _ref[1];
      return this.matcher.test(path);
    };

    Route.prototype.paramsFor = function(url) {
      var params, path, query, _ref;
      _ref = this.urlParts(url), path = _ref[0], query = _ref[1];
      params = {};
      Object.extend(params, extractParams(path, this.matcher, this.paramNames));
      if (query) {
        Object.extend(params, parseQuery(query));
      }
      return params;
    };

    Route.prototype.urlParts = function(url) {
      var hash, serverBit, _ref;
      _ref = url.split('#'), serverBit = _ref[0], hash = _ref[1];
      if (this.usesHash) {
        return (hash || "").split('?');
      } else {
        return (serverBit || "").split('?');
      }
    };

    return Route;

  })();

  egg.Router = (function(_super) {

    __extends(Router, _super);

    function Router() {
      return Router.__super__.constructor.apply(this, arguments);
    }

    Router.init(function(opts) {
      var name, pattern, _ref,
        _this = this;
      if (opts == null) {
        opts = {};
      }
      this.window = opts.window || window;
      if (opts.routes) {
        this.routes = {};
        _ref = opts.routes;
        for (name in _ref) {
          pattern = _ref[name];
          this.routes[name] = new Route(name, pattern);
        }
      } else {
        throw "Router needs a 'routes' option!";
      }
      return this.window.onpopstate = function() {
        return _this.run();
      };
    });

    Router.prototype.bookmark = function(action, params) {
      var route;
      if (params == null) {
        params = {};
      }
      route = this.routes[action];
      if (route) {
        return this.window.history.pushState({}, "", route.toURL(params));
      }
    };

    Router.prototype.run = function(url) {
      var route;
      if (url == null) {
        url = this.currentURL();
      }
      route = this.routeFor(url);
      if (route) {
        return this.emit("route:" + route.name, route.paramsFor(url));
      }
    };

    Router.prototype.paramsFor = function(url) {
      var _ref;
      return (_ref = this.routeFor(url)) != null ? _ref.paramsFor(url) : void 0;
    };

    Router.prototype.currentURL = function() {
      var l;
      l = this.window.location;
      return l.pathname + l.search + l.hash;
    };

    Router.prototype.routeFor = function(url) {
      var name, route, _ref;
      _ref = this.routes;
      for (name in _ref) {
        route = _ref[name];
        if (route.matches(url)) {
          return route;
        }
      }
      return null;
    };

    return Router;

  })(egg.Base);

}).call(this);
